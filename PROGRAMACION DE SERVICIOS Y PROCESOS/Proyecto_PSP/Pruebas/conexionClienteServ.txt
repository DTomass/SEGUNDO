Lado del servidor

import socket

# Dirección y puerto del servidor
HOST = 'localhost'
PORT = 8000

# Tamaño del buffer de recepción de mensajes
BUFFER_SIZE = 1024

# Creamos el socket del servidor
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((HOST, PORT))
server.listen()

# Lista de clientes conectados
clients = []

# Bucle principal del servidor
while True:
    # Aceptamos nuevas conexiones
    client_socket, client_address = server.accept()
    clients.append(client_socket)
    print(f'Conexión de {client_address} aceptada')

    # Lanzamos un hilo para atender al cliente
    # y seguir escuchando conexiones
    thread = Thread(target=handle_client, args=(client_socket,))
    thread.start()

# Función que atiende a un cliente en particular
def handle_client(client_socket):
    # Bucle de atención al cliente
    while True:
        # Recibimos un mensaje del cliente
        message = client_socket.recv(BUFFER_SIZE).decode()
        if not message:
            # Si el mensaje está vacío, es que el cliente ha cerrado la conexión
            break

        # Enviamos el mensaje a todos los clientes conectados
        for client in clients:
            client.send(message.encode())

# Cerramos la conexión con el cliente
client_socket.close()

Lado del cliente

import socket

# Dirección y puerto del servidor
HOST = 'localhost'
PORT = 8000

# Creamos el socket del cliente
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect((HOST, PORT))

# Bucle para enviar mensajes al servidor
while True:
    message = input('Mensaje a enviar: ')
    client.send(message.encode())

